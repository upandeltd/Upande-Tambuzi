[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-11 10:54:18.828871",
  "module": "Upande Tambuzi",
  "name": "Stock Entry Script",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if (doc.stock_entry_type == \"Harvesting\") or (doc.stock_entry_type == \"Receiving\") or (doc.stock_entry_type == \"Grading\"):\n    doc.submit()\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-02-14 01:15:16.702691",
  "module": "Upande Tambuzi",
  "name": "Stock Entry After Save",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Grading\":\n    name = doc.name\n    \n    if frappe.db.exists(\"QR Code\", name):\n        frappe.delete_doc(\"QR Code\", name)\n    \n    if doc.custom_bunch_qr_code:\n        qr_code_doc = frappe.get_doc({\n            \"doctype\": \"QR Code\",  \n            \"stock_entry\": doc.name,\n            \"qr_code_image\": doc.custom_bunch_qr_code,  \n        })\n        qr_code_doc.insert()\n        \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-24 12:22:22.737541",
  "module": "Upande Tambuzi",
  "name": "Harvest Stock Entry",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Harvest",
  "script": "stock_entry = frappe.new_doc(\"Stock Entry\")\n\nstock_entry.stock_entry_type = \"Harvesting\"\nstock_entry.custom_farm = doc.farm\nstock_entry.custom_greenhouse = doc.block or doc.blck or doc.bck\nstock_entry.custom_block__bed_number = doc.bay\nstock_entry.custom_harvester = doc.harvester\nstock_entry.custom_bucket_id = doc.bucket_id\nstock_entry.to_warehouse = doc.block or doc.blck or doc.bck\n\nstock_entry.append(\"items\", {\n    \n    \"item_code\": doc.item_code,\n    \"qty\": doc.quantity\n})\n\nstock_entry.insert()\nstock_entry.submit()\n\nfrappe.msgprint(f\"Stock Entry {stock_entry.name} created successfully.\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-08 17:27:53.094553",
  "module": "Upande Tambuzi",
  "name": "Automate Rejects Material Issue",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if (doc.stock_entry_type == \"Field Rejects\"):\n    farm = doc.custom_farm\n    items = []\n    for item in doc.items:\n        item_dict = {\n            \"item_code\": item.item_code,\n            \"qty\": item.qty,\n            \"s_warehouse\": None,\n            \"t_warehouse\": item.t_warehouse,\n            \"custom_rejection_reason\": item.custom_rejection_reason,\n            \"custom_bay\": item.custom_bay\n        }\n        \n        items.append(item_dict)\n        \n    \n    if items:\n        material_issue = frappe.get_doc({\n            \"doctype\": \"Stock Entry\",\n            \"stock_entry_type\": \"Field Rejects Material Issue\",\n            \"custom_farm\": farm,\n            \"items\": []\n        })\n\n        for item in items:\n            material_issue.append(\"items\", {\n                \"item_code\": item[\"item_code\"],\n                \"qty\": item[\"qty\"],\n                \"s_warehouse\": item[\"t_warehouse\"],\n                \"t_warehouse\": None,\n                \"custom_rejection_reason\": item[\"custom_rejection_reason\"],\n                \"custom_bay\": item[\"custom_bay\"]\n            })\n\n        material_issue.insert()\n        \n        material_issue.set_posting_time = 1 \n        material_issue.posting_date = doc.posting_date\n        material_issue.posting_time = doc.posting_time\n        \n        material_issue.submit()\n        \n        # Save the name of the document of material issue in the Stock Entry Doc\n        \n        frappe.msgprint(f\"Field Rejects Material Issue {material_issue.name} created successfully.\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-08 16:46:20.644668",
  "module": "Upande Tambuzi",
  "name": "Create Box Labels",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Farm Pack List",
  "script": "if doc.workflow_state == \"Pending Order Review\" and doc.get_doc_before_save().workflow_state == \"Draft\":\n\n    pack_list_items = doc.pack_list_item\n    sales_order_id = doc.custom_sales_order\n    \n    # Get the farm from the item table of the fpl\n    farm_warehouse = pack_list_items[0].source_warehouse\n    farm = farm_warehouse.split()[0]\n    \n    opl = frappe.db.sql(\"\"\"\n        SELECT p.name \n        FROM `tabOrder Pick List` p\n        JOIN `tabPick List Item` i ON i.parent = p.name\n        WHERE p.sales_order = %s\n        AND i.warehouse = %s\n        AND i.idx = 1\n        LIMIT 1\n    \"\"\", (sales_order_id, f'{farm} Available for Sale - TL'), as_dict=1)\n        \n    \n    sales_order_doc = frappe.get_doc(\n            \"Sales Order\", sales_order_id\n        )\n        \n        \n    if opl:\n        opl_doc = frappe.get_doc(\"Order Pick List\", opl[0].name)\n        \n        \n        \n        for item in pack_list_items:\n            # Check if a box label doc matching the opl used exists,\n            existing_labels = frappe.get_list(\n                    \"Box Label\",\n                    filters = {\n                        \"order_pick_list\": opl_doc.name\n                    }\n                )\n                \n    \n            \n            if not existing_labels:\n                total_stems = 0\n                box_1_items = []    \n                \n                for row in pack_list_items:\n                    if row.box_id == \"1\":\n                        box_1_items.append({\n                            \"item_code\": row.item_code,\n                            \"bunch_uom\": row.bunch_uom,\n                            \"bunch_qty\": row.bunch_qty\n                        })\n                        total_stems = total_stems + row.custom_number_of_stems\n                \n                \n                new_label = frappe.new_doc(\"Box Label\")\n                \n                new_label.customer = doc.custom_customer\n                new_label.box_number = 1\n                new_label.order_pick_list = opl_doc.name\n                new_label.pack_rate = total_stems\n                new_label.date = opl_doc.date_created\n                new_label.customer_purchase_order = sales_order_doc.po_no\n                new_label.consignee = sales_order_doc.custom_consignee\n                new_label.truck_details =  sales_order_doc.custom_truck_details\n                new_label.farm_pack_list_link = doc.name\n                new_label.length = pack_list_items[0].stem_length\n                \n                for fpl_item in box_1_items:\n                    new_label.append(\"box_item\", {\n                        \"variety\": fpl_item[\"item_code\"],\n                        \"uom\": fpl_item[\"bunch_uom\"],\n                        \"qty\": fpl_item[\"bunch_qty\"]\n                    })\n                \n                \n                new_label.insert()\n                \n            \n            if existing_labels:\n                # Check the number of box labels existing\n                # Create the next box label (box number = number of existing box labels + 1 )\n                # Filter that box number items in the fpl just like the box_1_items\n                # Next add the details just like box_1 was added.\n                # If there is no next box label, stop\n                existing_box_count = len(existing_labels)\n                box_number = existing_box_count + 1\n                \n                total_stems = 0\n                box_items = []\n                \n                for row in pack_list_items:\n                    if row.box_id == f\"{box_number}\":\n                        box_items.append({\n                            \"item_code\": row.item_code,\n                            \"bunch_uom\": row.bunch_uom,\n                            \"bunch_qty\": row.bunch_qty\n                        })\n                        total_stems = total_stems + row.custom_number_of_stems\n                \n            \n                if len(box_items) > 0:\n    \n                    new_label = frappe.new_doc(\"Box Label\")\n            \n                    new_label.customer = doc.custom_customer\n                    new_label.box_number = box_number\n                    new_label.order_pick_list = opl_doc.name\n                    new_label.pack_rate = total_stems\n                    new_label.date = opl_doc.date_created\n                    new_label.customer_purchase_order = sales_order_doc.po_no\n                    new_label.consignee = sales_order_doc.custom_consignee\n                    new_label.truck_details = sales_order_doc.custom_truck_details\n                    new_label.farm_pack_list_link = doc.name\n                    new_label.length = pack_list_items[0].stem_length\n                \n                    for fpl_item in box_items:\n                        new_label.append(\"box_item\", {\n                            \"variety\": fpl_item[\"item_code\"],\n                            \"uom\": fpl_item[\"bunch_uom\"],\n                            \"qty\": fpl_item[\"bunch_qty\"]\n                        })\n                        \n                    # Save the new box label\n                    new_label.insert()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-12 19:33:10.344013",
  "module": "Upande Tambuzi",
  "name": "Update Grading Forecast Tracker",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Grading Forecast\":\n    source_warehouse = doc.items[0].s_warehouse\n    farm = source_warehouse.split()[0]\n    new_tracker_doc = None\n    varieties_in_stock_entry = []\n    \n    for item in doc.items:\n        if item.t_warehouse:\n            varieties_in_stock_entry.append({\n                \"item_code\": item.item_code,\n                \"qty\": item.qty\n            })\n            \n\n    tracker_list = frappe.get_list(\"Grading Forecast Tracker\", fields='name',\n        filters= {\n            'farm': farm\n        })\n\n    # If tracker doc doesn't exist create one with farm set\n    if len(tracker_list) < 1:\n        \n        doc = frappe.new_doc(\"Grading Forecast Tracker\")\n        doc.farm = farm\n        doc.insert()\n        \n        for item in varieties_in_stock_entry:\n            item_found = False\n\n            for tracker_item in doc.items:\n                if tracker_item.variety == item[\"item_code\"]:\n                    # If item_code found, increment the quantity\n                    tracker_item.qty_deficit_in_forecast = tracker_item.qty_deficit_in_forecast + item[\"qty\"]\n                    item_found = True\n                    break\n\n            # If item_code wasn't found, create a new row in the tracker item table\n            if not item_found:\n                new_item_row = doc.append(\"items\", {\n                    \"variety\": item[\"item_code\"],\n                    \"qty_deficit_in_forecast\": item[\"qty\"]\n                })\n        \n        doc.save()\n\n    if len(tracker_list) > 0:\n        # Check the varieties in Grading Forecast Tracker doc.items and compare to the ones in varieties_in_stock_entry\n        existing_tracker = frappe.get_doc(\"Grading Forecast Tracker\", tracker_list[0].name)\n        \n        for item in varieties_in_stock_entry:\n            # Flag to check if item_code was found in the existing tracker\n            item_found = False\n\n            # Loop through existing tracker items to find a match by item_code\n            for tracker_item in existing_tracker.items:\n                if tracker_item.variety == item[\"item_code\"]:\n                    # If item_code found, increment the quantity\n                    tracker_item.qty_deficit_in_forecast = tracker_item.qty_deficit_in_forecast + item[\"qty\"]\n                    item_found = True\n                    break\n\n            # If item_code wasn't found, create a new row in the tracker item table\n            if not item_found:\n                new_item_row = existing_tracker.append(\"items\", {\n                    \"variety\": item[\"item_code\"],\n                    \"qty_deficit_in_forecast\": item[\"qty\"]\n                })\n        \n        # After updating items, save the existing tracker\n        existing_tracker.save()\n        \n\n    \n\n    \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-11 12:14:56.911903",
  "module": "Upande Tambuzi",
  "name": "Update Sales Order ID on Save",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Consolidated Pack List",
  "script": "if doc.items:\n    for item in doc.items:\n        if item.sales_order_id:\n            doc.custom_sales_order_id_cpl = item.sales_order_id\n            break\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-12 19:29:27.379028",
  "module": "Upande Tambuzi",
  "name": "Update Forecast Tracker (During Grading)",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Stock Entry",
  "script": "if doc.stock_entry_type == \"Grading\":\n    # Remove the variety and quantity to go and pay for the debt in forecast while\n    variety_in_stock_entry = []\n    farm = doc.custom_farm\n    \n    for item in doc.items:\n        variety_in_stock_entry.append({\n            \"item_code\": item.item_code,\n            \"qty\": item.transfer_qty\n        })\n\n    existing_tracker = frappe.get_doc(\"Grading Forecast Tracker\", farm)\n    items_to_transfer = []\n    \n    for item in variety_in_stock_entry:\n        item_found = False\n\n        # Loop through existing tracker items to find a match by item_code\n        for tracker_item in existing_tracker.items:\n            if tracker_item.variety == item[\"item_code\"]:\n                # Check the balance(qty) in the tracker and pay that, maximum of the qty of stems graded in the stock entry\n                item_found = True\n                if tracker_item.qty_deficit_in_forecast > 0:\n                    transferable_qty = min(item[\"qty\"], tracker_item.qty_deficit_in_forecast)\n\n                    # Reduce the deficit in the tracker\n                    tracker_item.qty_deficit_in_forecast = tracker_item.qty_deficit_in_forecast - transferable_qty\n\n                    # Append the item to the transfer list\n                    items_to_transfer.append({\n                        \"source_item\": tracker_item.variety,\n                        \"target_item\": f\"{farm} Grading Forecast\",\n                        \"qty\": transferable_qty\n                    })\n\n                break\n\n        # If item_code wasn't found, create a new row in the tracker item table\n        if not item_found:\n            new_item_row = existing_tracker.append(\"items\", {\n                \"variety\": item[\"item_code\"],\n                \"qty_deficit_in_forecast\": item[\"qty\"]\n            })\n        \n        # After updating items, save the existing tracker\n        existing_tracker.save()\n        \n    if len(items_to_transfer) > 0:\n        # Perform a stock entry called type Forecast Repayment that is repack of variety from {farm} Available for Sale to\n        # {farm} Grading Forecast - TL as variety {farm} Grading Forecast\n        stock_entry = frappe.new_doc(\"Stock Entry\")\n        stock_entry.stock_entry_type = \"Forecast Repayment\"\n        \n        for transfer_item in items_to_transfer:\n            stock_entry.append(\"items\", {\n                \"item_code\": transfer_item[\"source_item\"],  # Source: actual variety\n                \"qty\": transfer_item[\"qty\"],\n                \"s_warehouse\": f\"{farm} Available for Sale - TL\"\n            })\n            stock_entry.append(\"items\", {\n                \"item_code\": transfer_item[\"target_item\"],  # Target: Graded Forecast item\n                \"qty\": transfer_item[\"qty\"],\n                \"t_warehouse\": f\"{farm} Grading Forecast - TL\"\n            })\n        \n        stock_entry.insert()\n        stock_entry.submit()\n\n        \n        \n        \n    \n    ",
  "script_type": "DocType Event"
 }
]